. Delete a given position element.

/*Program to perform singly linked list operations*/

#include<stdio.h>

#include<stdlib.h>

//creating a node using structure

struct node

{

int data;

struct node *next;

};

struct node *head;

//Function declaration/prototype

void beginsert ();

void begin_delete();

void last_delete();

void random_delete();

void display();

//Main function

void main ()

{

 int choice =0;
while(choice != 9)

{

printf("\n\n*********Main Menu*********\n");

printf("\nChoose one option from the following list ...\n");

printf("\n=================================\n");

printf("\n1.Insert in begining\n 2.Delete from Beginning\n3.Delete from 

last\n4.Delete node after specified location\n5.Display\n6.Exit\n");

printf("\nEnter your choice:");

scanf("\n%d",&choice);

switch(choice)

{

 case 1: beginsert();

 break;

 case 2: begin_delete();

 break;

 case 3: last_delete();

 break;

 case 4: random_delete();

 break;

 case 5: display();

 break;

 case 6: exit(0);

 break;

 default:

 printf("Please enter valid choice..");

 }

 }

}

//Insert at the beginning

void beginsert()

{

struct node *ptr;

int item;

ptr = (struct node *) malloc(sizeof(struct node *));

if(ptr == NULL)

{

 printf("\nOVERFLOW");

}

else

{printf("\nEnter value/elements:");

scanf("%d",&item);

ptr->data = item;

ptr->next = head;

head = ptr;

printf("\nNode created \nInserted element is: %d",item);

}

}

//delete from the beginning

void begin_delete()

{

 struct node *ptr; 

 if(head == NULL)

 {

 printf("\nList is empty\n");

 }

 else

 {

 ptr = head;

 head = ptr->next;

 free(ptr);

 printf("\nNode deleted from the beginning ...\n");

 }

}

//delete from the last/end

void last_delete()

{

 struct node *ptr,*ptr1;

 if(head == NULL)

 {

 printf("\nlist is empty");

 }

 else if(head -> next == NULL)

 {

 head = NULL;

 free(head);

 printf("\n Only node of the list deleted ...\n");

 }

 else

 {

 ptr = head;while(ptr->next != NULL)

 {

 ptr1 = ptr;

 ptr = ptr ->next;

 }

 ptr1->next = NULL;

 free(ptr);

 printf("\nDeleted Node from the last ...\n");

 }

}

//delete from the specified postion

void random_delete()

 {

 struct node *ptr,*ptr1;

 int loc,i;

 printf("\n Enter the location of the node after which you want to perform 

deletion \n");

 scanf("%d",&loc);

 ptr=head;

 for(i=0;i<loc;i++)

 {

 ptr1 = ptr;

 ptr = ptr->next;

 if(ptr == NULL)

 {

 printf("\nCan't delete");

 return;

 }

 }

 ptr1 ->next = ptr ->next;

 free(ptr);

 printf("\nDeleted node %d ",loc+1);

 }

 //Display the elements

void display()

{

struct node *ptr;

ptr = head;if(ptr == NULL)

 {

 printf("Nothing to print");

 }

 else

 {

 printf("\n printing values \n");

 while (ptr!=NULL)

 {

 printf("\n%d",ptr->data);

 ptr = ptr -> next;

 }

 }

}
